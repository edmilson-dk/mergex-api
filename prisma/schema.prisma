// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  name            String    @db.VarChar(255)
  username        String    @unique @db.VarChar(255)
  email           String    @unique @db.VarChar(255)
  password        String    @db.VarChar(255)
  github_id       String    @unique
  github_username String    @unique @db.VarChar(255)
  github_profile  String
  bio             String    @db.Text
  avatar_url      String?
  banner_rl       String?
  website         String?
  location        String?
  date_of_birth   DateTime?

  is_disabled Boolean @default(false)

  // user posts interactions
  posts    Post[]
  comments PostComments[]
  likes    PostLikes[]
  dislikes PostDisLikes[]

  // user followers relationship
  followers Relationship[] @relation("following")

  // user following relationship
  following Relationship[] @relation("followers")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([username, github_id, email])
  @@map("users")
}

model Relationship {
  id          String @id @default(uuid())
  follower_id String
  followed_id String

  follower User @relation("followers", fields: [follower_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  followed User @relation("following", fields: [followed_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  created_at DateTime @default(now())
  @@map("followers")
}

model Post {
  id         String   @id @default(uuid())
  content    String   @db.Text
  author_id  String
  author     User     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  comments PostComments[]
  likes    PostLikes[]
  dislikes PostDisLikes[]

  @@map("posts")
}

model PostLikes {
  id         String   @id @default(uuid())
  post_id    String
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author_id  String
  author     User     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  created_at DateTime @default(now())

  @@map("posts_likes")
}

model PostDisLikes {
  id         String   @id @default(uuid())
  post_id    String
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author_id  String
  author     User     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  created_at DateTime @default(now())

  @@map("posts_dislikes")
}

model PostComments {
  id         String   @id @default(uuid())
  post_id    String
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  author_id  String
  author     User     @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content    String   @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("posts_comments")
}
