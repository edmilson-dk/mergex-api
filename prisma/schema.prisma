// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String    @db.VarChar(255)
  username       String    @db.VarChar(255)
  email          String    @db.VarChar(255)
  password       String    @db.VarChar(255)
  githubId       Int
  githubUsername String    @db.VarChar(255)
  githubProfile  String
  bio            String    @db.Text
  avatarUrl      String?
  bannerUrl      String?
  website        String?
  location       String?
  dateOfBirth    DateTime?

  isDisabled Boolean @default(false)

  // user posts interactions
  posts    Post[]
  comments PostComments[]
  likes    PostLikes[]
  dislikes PostDisLikes[]

  // user followers relationship
  followers Relationship[] @relation("followers")

  // user following relationship
  following Relationship[] @relation("following")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([username, githubId, email])
  @@map("users")
}

model Relationship {
  id         String @id @default(uuid())
  followerId String
  followedId String

  follower User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  followed User @relation("following", fields: [followedId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  @@map("followers")
}

model Post {
  id        String   @id @default(uuid())
  content   String   @db.Text
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  codeSnippets CodeSnippets[]
  comments     PostComments[]
  likes        PostLikes[]
  dislikes     PostDisLikes[]

  @@map("posts")
}

model PostLikes {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
}

model PostDisLikes {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
}

model CodeSnippets {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  code      String   @db.Text
  language  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("code_snippets")
}

model PostComments {
  id        String   @id @default(uuid())
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("post_comments")
}
